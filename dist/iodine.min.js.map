{"version":3,"file":"iodine.min.js","sources":["../src/iodine.js"],"sourcesContent":["/*\n|--------------------------------------------------------------------------\n| Iodine - JavaScript Library\n|--------------------------------------------------------------------------\n|\n| This library contains a collection of useful validation rules that can\n| be used to quickly verify whether items meet certain conditions.\n|\n*/\nexport default class Iodine\n{\n\n\t/**\n\t * Constructor.\n\t *\n\t **/\n\tconstructor()\n\t{\n\t\tthis.messages = this._defaultMessages();\n\t}\n\n\n\n\t/**\n\t * @internal.\n\t *\n\t **/\n\t_dateCompare(first, second, type, equals = false)\n\t{\n\t\tif (! this.isDate(first)) return false;\n\n\t\tif (! this.isDate(second) && ! this.isInteger(second)) return false;\n\n\t\tsecond = typeof second === 'number' ? second : second.getTime();\n\n\t\tif (type === 'less' && equals) return first.getTime() <= second;\n\t\tif (type === 'less' && ! equals) return first.getTime() < second;\n\t\tif (type === 'more' && equals) return first.getTime() >= second;\n\t\tif (type === 'more' && ! equals) return first.getTime() > second;\n\t}\n\n\n\n\t/**\n\t * @internal.\n\t *\n\t **/\n\t_defaultMessages()\n\t{\n\t\treturn {\n\t\t\tafter         : `The date must be after: '[PARAM]'`,\n\t\t\tafterOrEqual  : `The date must be after or equal to: '[PARAM]'`,\n\t\t\tarray         : `Field must be an array`,\n\t\t\tbefore        : `The date must be before: '[PARAM]'`,\n\t\t\tbeforeOrEqual : `The date must be before or equal to: '[PARAM]'`,\n\t\t\tboolean       : `Field must be true or false`,\n\t\t\tdate          : `Field must be a date`,\n\t\t\tdifferent     : `Field must be different to '[PARAM]'`,\n\t\t\tendingWith    : `Field must end with '[PARAM]'`,\n\t\t\temail         : `Field must be a valid email address`,\n\t\t\tfalsy         : `Field must be a falsy value (false, 'false', 0 or '0')`,\n\t\t\tin     \t\t  : `Field must be one of the following options: [PARAM]`,\n\t\t\tinteger       : `Field must be an integer`,\n\t\t\tjson          : `Field must be a parsable JSON object string`,\n\t\t\tmaximum       : `Field must not be greater than '[PARAM]' in size or character length`,\n\t\t\tminimum       : `Field must not be less than '[PARAM]' in size or character length`,\n\t\t\tnotIn         : `Field must not be one of the following options: [PARAM]`,\n\t\t\tnumeric       : `Field must be numeric`,\n\t\t\toptional      : `Field is optional`,\n\t\t\tregexMatch    : `Field must satisify the regular expression: [PARAM]`,\n\t\t\trequired      : `Field must be present`,\n\t\t\tsame          : `Field must be '[PARAM]'`,\n\t\t\tstartingWith  : `Field must start with '[PARAM]'`,\n\t\t\tstring        : `Field must be a string`,\n\t\t\ttruthy        : `Field must be a truthy value (true, 'true', 1 or '1')`,\n\t\t\turl           : `Field must be a valid url`,\n\t\t\tuuid          : `Field must be a valid UUID`,\n\t\t};\n\t}\n\n\n\n\t/**\n\t * Retrieve an error message for the given rule.\n\t *\n\t **/\n\tgetErrorMessage(rule, arg = null)\n\t{\n\t\tlet key   = rule.split(':')[0];\n\t\tlet param = arg || rule.split(':')[1];\n\n\t\tif (['after', 'afterOrEqual', 'before', 'beforeOrEqual'].includes(key)) {\n\t\t\tparam = new Date(parseInt(param)).toLocaleTimeString(undefined, {\n\t\t\t\tyear: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: 'numeric'\n\t\t\t});\n\t\t}\n\n\t\treturn param === undefined\n\t\t\t ? this.messages[key]\n\t\t\t : this.messages[key].replace(\"[PARAM]\", param);\n\t}\n\n\n\n\t/**\n\t * Determine if the given date is after another given date.\n\t *\n\t **/\n\tisAfter(value, after)\n\t{\n\t\treturn this._dateCompare(value, after, 'more', false);\n\t}\n\n\n\n\t/**\n\t * Determine if the given date is after or equal to another given date.\n\t *\n\t **/\n\tisAfterOrEqual(value, after)\n\t{\n\t\treturn this._dateCompare(value, after, 'more', true);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is an array.\n\t *\n\t **/\n\tisArray(value)\n\t{\n\t\treturn Array.isArray(value);\n\t}\n\n\n\n\t/**\n\t * Determine if the given date is before another given date.\n\t *\n\t **/\n\tisBefore(value, before)\n\t{\n\t\treturn this._dateCompare(value, before, 'less', false);\n\t}\n\n\n\n\t/**\n\t * Determine if the given date is before or equal to another given date.\n\t *\n\t **/\n\tisBeforeOrEqual(value, before)\n\t{\n\t\treturn this._dateCompare(value, before, 'less', true);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is a boolean.\n\t *\n\t **/\n\tisBoolean(value)\n\t{\n\t\treturn [true, false].includes(value);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is a date object.\n\t *\n\t **/\n\tisDate(value)\n\t{\n\t\treturn value && Object.prototype.toString.call(value) === '[object Date]' && ! isNaN(value);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is different to another given value.\n\t *\n\t **/\n\tisDifferent(value, different)\n\t{\n\t\treturn value !== different;\n\t}\n\n\n\n\t/**\n\t * Determine if the given value ends with another given value.\n\t *\n\t **/\n\tisEndingWith(value, sub)\n\t{\n\t\treturn this.isString(value) && value.endsWith(sub);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is a valid email address.\n\t *\n\t **/\n\tisEmail(value)\n\t{\n\t\treturn new RegExp('^\\\\S+@\\\\S+[\\\\.][0-9a-z]+$').test(String(value).toLowerCase());\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is falsy.\n\t *\n\t **/\n\tisFalsy(value)\n\t{\n\t\treturn [0, '0', false, 'false'].includes(value);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is within the given array of options.\n\t *\n\t **/\n\tisIn(value, options)\n\t{\n\t\toptions = typeof options === 'string'\n\t\t\t\t? options.split(\",\")\n\t\t\t\t: options;\n\n\t\treturn options.includes(value);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is an integer.\n\t *\n\t **/\n\tisInteger(value)\n\t{\n\t\treturn Number.isInteger(value) && parseInt(value).toString() === value.toString();\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is a JSON string.\n\t *\n\t **/\n\tisJson(value)\n\t{\n\t\ttry {\n        \treturn typeof JSON.parse(value) === 'object';\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Determine if the given value meets the given maximum limit.\n\t *\n\t **/\n\tisMaximum(value, limit)\n\t{\n\t\tvalue = typeof value === 'string' ? value.length : value;\n\n\t\treturn parseFloat(value) <= limit;\n\t}\n\n\n\n\t/**\n\t * Determine if the given value meets the given minimum limit.\n\t *\n\t **/\n\tisMinimum(value, limit)\n\t{\n\t\tvalue = typeof value === 'string' ? value.length : value;\n\n\t\treturn parseFloat(value) >= limit;\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is not within the given array of options.\n\t *\n\t **/\n\tisNotIn(value, options)\n\t{\n\t\treturn ! this.isIn(value, options);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is numeric (an integer or a float).\n\t *\n\t **/\n\tisNumeric(value)\n\t{\n\t\treturn ! isNaN(parseFloat(value)) && isFinite(value);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is optional.\n\t *\n\t **/\n\tisOptional(value)\n\t{\n\t\treturn [null, undefined, ''].includes(value);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value satisifies the given regular expression.\n\t *\n\t **/\n\tisRegexMatch(value, expression)\n\t{\n\t\treturn new RegExp(expression).test(String(value).toLowerCase());\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is present.\n\t *\n\t **/\n\tisRequired(value)\n\t{\n\t\treturn ! this.isOptional(value);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is the same as another given value.\n\t *\n\t **/\n\tisSame(value, different)\n\t{\n\t\treturn value === different;\n\t}\n\n\n\n\t/**\n\t * Determine if the given value starts with another given value.\n\t *\n\t **/\n\tisStartingWith(value, sub)\n\t{\n\t\treturn this.isString(value) && value.startsWith(sub);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is a string.\n\t *\n\t **/\n\tisString(value)\n\t{\n\t\treturn typeof value === 'string';\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is truthy.\n\t *\n\t **/\n\tisTruthy(value)\n\t{\n\t\treturn [1, '1', true, 'true'].includes(value);\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is a valid URL.\n\t *\n\t **/\n\tisUrl(value)\n\t{\n\t\treturn new RegExp('^(https?:\\\\/\\\\/)?((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*(\\\\?[;&a-z\\\\d%_.~+=-]*)?(\\\\#[-a-z\\\\d_]*)?$')\n\t\t\t .test(String(value).toLowerCase());\n\t}\n\n\n\n\t/**\n\t * Determine if the given value is a valid UUID.\n\t *\n\t **/\n\tisUuid(value)\n\t{\n\t\treturn new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$')\n\t\t\t .test(String(value).toLowerCase());\n\t}\n\n\n\n\t/**\n\t * Determine whether the given value meets the given rules.\n\t *\n\t **/\n\tis(value, rules = [])\n\t{\n\t\t// Check if no rules were specified\n\t\tif (rules.length === 0) return true;\n\n\t\t// Check for an optional value\n\t\tif (rules[0] === 'optional' && this.isOptional(value)) return true;\n\n\t\t// Iterate through the rules\n\t\tfor (let index = 0; index < rules.length; index++) {\n\n\t\t\t// Ignore optional rules\n\t\t\tif (rules[index] === 'optional') continue;\n\n\t\t\t// Determine the method to use\n\t\t\tlet rule = rules[index].split(':')[0][0].toUpperCase()\n\t\t\t\t\t + rules[index].split(':')[0].slice(1);\n\n\t\t\t// Validate the value against the method\n\t\t\tlet result = this[`is${rule}`].apply(this, [value, rules[index].split(':')[1]]);\n\n\t\t\t// Check if the value failed validation\n\t\t\tif (! result) return rules[index];\n\n\t\t}\n\n\t\t// Otherwise, the value is valid\n\t\treturn true;\n\t}\n\n\n\n\t/**\n\t * Replace the default error messages with a new set.\n\t *\n\t **/\n\tsetErrorMessages(messages)\n\t{\n\t\tthis.messages = messages;\n\t}\n\n}\n\n\n\n/**\n * Create an instance of the library.\n *\n **/\nwindow.Iodine = new Iodine();"],"names":["Iodine","constructor","messages","this","_defaultMessages","_dateCompare","first","second","type","equals","isDate","isInteger","getTime","after","afterOrEqual","array","before","beforeOrEqual","boolean","date","different","endingWith","email","falsy","in","integer","json","maximum","minimum","notIn","numeric","optional","regexMatch","required","same","startingWith","string","truthy","url","uuid","getErrorMessage","rule","arg","key","split","param","includes","Date","parseInt","toLocaleTimeString","undefined","year","month","day","hour","minute","replace","isAfter","value","isAfterOrEqual","isArray","Array","isBefore","isBeforeOrEqual","isBoolean","Object","prototype","toString","call","isNaN","isDifferent","isEndingWith","sub","isString","endsWith","isEmail","RegExp","test","String","toLowerCase","isFalsy","isIn","options","Number","isJson","JSON","parse","e","isMaximum","limit","length","parseFloat","isMinimum","isNotIn","isNumeric","isFinite","isOptional","isRegexMatch","expression","isRequired","isSame","isStartingWith","startsWith","isTruthy","isUrl","isUuid","is","rules","let","index","toUpperCase","slice","apply","setErrorMessages","window"],"mappings":"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"}